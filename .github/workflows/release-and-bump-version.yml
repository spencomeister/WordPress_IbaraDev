name: Release and Bump Version

on:
  push:
    branches:
      - '**'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get last commit message
        id: last_commit
        run: |
          msg=$(git log -1 --pretty=%B | tr -d '\n')
          echo "msg=$msg" >> $GITHUB_OUTPUT

      - name: Bump style.css version
        id: bump_version
        run: |
          # Extract current version
          version_line=$(grep -m1 '^Version:' style.css)
          version=$(echo "$version_line" | awk '{print $2}')
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)
          if [[ -z "$patch" ]]; then patch=0; fi
          msg="${{ steps.last_commit.outputs.msg }}"
          if echo "$msg" | grep -iE 'feature'; then
            minor=$((minor+1))
            patch=0
          elif echo "$msg" | grep -iE 'fix|bug'; then
            patch=$((patch+1))
          fi
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          sed -i "s/^Version: .*/Version: $new_version/" style.css
          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Commit version bump if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add style.css
          git diff --cached --quiet || git commit -m "chore: bump style.css version to ${{ steps.bump_version.outputs.version }}"
          git push || echo "No changes to push."


      - name: Create ZIP archive
        run: |
          zip -r WordPress_IbaraDev.zip \
            404.php category.php footer.php front-page.php functions.php \
            header.php home.php index.php page-achievements.php page.php \
            README.md screenshot.png search.php single.php style.css \
            images js


      - name: Create and push tag (with auto-increment if exists)
        id: create_tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          version=${{ steps.bump_version.outputs.version }}
          tag_exists=$(git ls-remote --tags origin v$version | wc -l)
          while [ "$tag_exists" -gt 0 ]; do
            # バージョンをインクリメント
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            patch=$(echo $version | cut -d. -f3)
            if [[ -z "$patch" ]]; then patch=0; fi
            patch=$((patch+1))
            new_version="$major.$minor.$patch"
            echo "Tag v$new_version will be created instead (v$version already exists)"
            sed -i "s/^Version: .*/Version: $new_version/" style.css
            git add style.css
            git commit -m "chore: bump style.css version to $new_version (auto-incremented)" || echo "No changes to commit."
            git push || echo "No changes to push."
            version=$new_version
            tag_exists=$(git ls-remote --tags origin v$version | wc -l)
          done
          # 既存タグがローカルにあれば削除
          if git rev-parse "v$version" >/dev/null 2>&1; then
            git tag -d v$version
          fi
          # 既存タグがリモートにあれば削除
          if git ls-remote --tags origin | grep -q "refs/tags/v$version"; then
            git push --delete origin v$version || true
          fi
          git tag v$version
          git push origin v$version
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Fetch tags after push
        run: |
          git fetch --tags

      - name: Create or Update GitHub Release
        run: |
          version=${{ steps.create_tag.outputs.version }}
          
          # 既存のリリースIDを取得
          release_id=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$version" | jq -r '.id // empty')
          
          if [ -n "$release_id" ] && [ "$release_id" != "null" ]; then
            echo "Updating existing release with ID: $release_id"
            # 既存リリースを更新
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id" \
              -d "{\"tag_name\":\"v$version\",\"name\":\"Release v$version\",\"body\":\"Automated release for version $version.\"}"
          else
            echo "Creating new release for v$version"
            # 新しいリリースを作成
            release_id=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{\"tag_name\":\"v$version\",\"name\":\"Release v$version\",\"body\":\"Automated release for version $version.\"}" | jq -r '.id')
          fi
          
          echo "release_id=$release_id" >> $GITHUB_OUTPUT
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP to Release
        run: |
          version=${{ steps.create_tag.outputs.version }}
          release_id=${{ steps.create_release.outputs.release_id }}
          
          # ZIPファイルをリリースにアップロード
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @WordPress_IbaraDev.zip \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=WordPress_IbaraDev.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
